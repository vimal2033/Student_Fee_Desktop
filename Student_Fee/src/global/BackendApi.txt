
//This code do read and write operation of the  GOOGLE_SHEETS data whos url is passes as parameter


const API_KEY = "#########"; //enter api key you wana use in frontend

function doGet(e) {
  if (!e || e.parameter.apiKey !== API_KEY || !e.parameter.apidataurl) {
    return ContentService.createTextOutput(
      JSON.stringify({ status: 401, error: "Unauthorized - Invalid API Key" })
    ).setMimeType(ContentService.MimeType.JSON);
  }

  const ss = SpreadsheetApp.openByUrl(e.parameter.apidataurl);

  function getSheetData(sheetName) {
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) return [];

    const data = sheet.getRange("A1").getDataRegion().getValues();
    const headers = data.shift();

    return data.map((row) => {
      let obj = {};
      headers.forEach((h, i) => {
        obj[h] = row[i];
      });
      return obj;
    });
  }

  // Fetch data from both sheets
  // enter the name of your sheet
  const sheet1Data = getSheetData("DCA").concat(getSheetData("PGDCA"),
                     getSheetData("MDCH"),             
                     getSheetData("BASIC"),
                     getSheetData("TALLY")

                                  );
  const sheet2Data = getSheetData("PassBook");

  return ContentService.createTextOutput(
    JSON.stringify({
      STD: sheet1Data,
      PassBook: sheet2Data,
    })
  ).setMimeType(ContentService.MimeType.JSON);
}


function doPost(e) {
  try {
    const params = JSON.parse(e.postData.contents);

    // Validate API key
    if (!params.apiKey || params.apiKey !== API_KEY || !params.apidataurl) {
      return ContentService.createTextOutput(
        JSON.stringify({ status: 401, error: "Unauthorized - Invalid API Key" })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    const ss = SpreadsheetApp.openByUrl(params.apidataurl);
    const bodyJSON = params;

    if (!bodyJSON.sheetName) {
      throw new Error("Missing 'sheetName' parameter in request body.");
    }

    const sheet = ss.getSheetByName(bodyJSON.sheetName);
    if (!sheet) {
      throw new Error(`Sheet '${bodyJSON.sheetName}' not found.`);
    }

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues(); // IDs from first column

    // Get the last used ID in the first column
    let lastId = '';
    for (let i = data.length - 1; i >= 0; i--) {
      const id = data[i][0];
      if (typeof id === 'string' && id.trim() !== '') {
        lastId = id.trim();
        break;
      }
    }

    // Generate next ID
    let newId = 'ID001'; // fallback
    if (lastId) {
      const match = lastId.match(/^([A-Za-z]+)(\d+)$/);
      if (match) {
        const prefix = match[1];
        const number = parseInt(match[2], 10) + 1;
        const paddedNumber = number.toString().padStart(match[2].length, '0');
        newId = prefix + paddedNumber;
      }
    }

    // Build rowData starting with the new ID
    const rowData = [newId, ...headers.slice(1).map(h => bodyJSON[h] || "")];

    sheet.appendRow(rowData);

    return ContentService.createTextOutput(
      JSON.stringify({ status: 200, message: "Data added successfully!", id: newId })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({ status: 500, error: error.toString() })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

